import"./css/style.css";import icons from"./img/icons.svg";import{getWeatherIcon}from"./helpers";const geoBtn=document.querySelector(".header__icon-box"),searchInpt=document.querySelector(".header__input"),searchForm=document.querySelector(".header__search"),currPosEl=document.querySelector(".header__position-text"),forecast=document.querySelector(".forecast"),overview=document.querySelector(".overview");class Weather{constructor(){this.data={}}async reverseGeocode({latitude:e,longitude:t}){try{const n=await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${e}&lon=${t}&format=json`);if(!n.ok)return alert("Problem getting your location data");const r=await n.json(),{country:s,country_code:a}=r.address;currPosEl.textContent=`${a.toUpperCase()}, ${s}`}catch(e){console.log(e)}}async getLocation(){currPosEl.textContent="Loading...",new Promise(((e,t)=>{navigator.geolocation.getCurrentPosition((e=>{const{latitude:t,longitude:n}=e.coords;this.fetchWeather({latitude:t,longitude:n}),this.reverseGeocode(e.coords)}),(e=>{e.message.toLowerCase().includes("denied")&&alert("Please allow Geolocation"),console.error(e)}))}))}renderLoader(){forecast.innerHTML="",overview.innerHTML="",forecast.insertAdjacentHTML("afterbegin",'<div class="loader__container">\n          <div class="loader"></div>\n        </div>')}async fetchWeather({latitude:e,longitude:t}){this.renderLoader();try{const n=await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${e}&longitude=${t}&current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,rain,weather_code,surface_pressure,wind_speed_10m&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset,uv_index_max,weather_code&hourly=visibility&timezone=auto`);if(!n.ok)throw new Error("Failed fetching weather");this.data=await n.json(),this.render()}catch(e){console.log(e),alert(e.message)}}async geoCoding(e){try{const t=await fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${e}`),n=await t.json();if(!n.results)throw new Error("Location not Found");const{latitude:r,longitude:s,name:a,country_code:i}=n.results.at(0);currPosEl.textContent=`${i}, ${a}`,this.fetchWeather({latitude:r,longitude:s})}catch(e){console.log(e),alert(e.message)}}formatDate(e,t){return Intl.DateTimeFormat("en",{weekday:t}).format(e)}generateCards(){const{temperature_2m_max:e,temperature_2m_min:t,weather_code:n,time:r}=this.data.daily;return e.map(((e,s)=>{if(0===s)return;const a=getWeatherIcon(n[s]);return`\n        <div class="card-sub">\n            <p class="card-sub__date">${this.formatDate(new Date(r[s]),"short")}</p>\n            <svg>\n              <use href="${icons}#${a}"></use>\n            </svg>\n            <p class="text-temperature mt-1">${t[s]}&deg; &nbsp;&nbsp;${e}&deg;</p>\n          </div>\n      `})).join("")}render(){forecast.innerHTML="";const{time:e,temperature_2m:t,wind_speed_10m:n,apparent_temperature:r,surface_pressure:s,rain:a,relative_humidity_2m:i,weather_code:o}=this.data.current,c=new Date(e),d=new Date(this.data.daily.sunrise[0]),l=new Date(this.data.daily.sunset[0]),u=this.data.daily.uv_index_max[0],g=this.data.hourly.visibility[0],m=getWeatherIcon(o),v=`\n          <div class="card-main">\n            <div class="card__date mb-tn">\n              <span>${this.formatDate(c,"long")}</span>\n              <span>${c.getHours()}:${String(c.getMinutes()).padEnd(2,"0")} ${c.getHours()>12?"PM":"AM"}</span>\n            </div>\n            <div class="fx gp-1">\n              <div class="card-main__details">\n                <p class="card-main__temperature mb-sm">${Math.round(t)}&deg;</p>\n                <p>Feel's like<strong class="cl-d">${r}&deg;</strong></p>\n                <p>Wind N-E <strong class="cl-d">${n}km/h</strong></p>\n                <p>Pressure<strong class="cl-d">${s}MB</strong></p>\n                <p>Rain<strong class="cl-d">${a}mm</strong></p>\n              </div>\n              <div class="card-main__details">\n                <div class="align-right">\n                  <svg class="mb-tn card-main__img">\n                    <use href="${icons}#${m}"></use>\n                  </svg>\n                </div>\n                <p>Sunrise<strong class="cl-d">${d.getHours()}:${String(d.getMinutes()).padEnd(2,"0")}${d.getHours()>12?"PM":"AM"}</strong></p>\n                <p>Sunset <strong class="cl-d">${l.getHours()}:${String(l.getMinutes()).padEnd(2,"0")}${l.getHours()>12?"PM":"AM"}</strong></p>\n              </div>\n            </div>\n          </div>\n\n          ${this.generateCards()}\n        </div>\n    `;forecast.insertAdjacentHTML("afterbegin",v);const p=`\n    <div class="overview__card">\n            <p class="align-self">UV Index</p>\n            <svg class="overview__img align-center">\n              <use href="${icons}#uv"></use>\n            </svg>\n            <div class="align-center">\n              <p><strong>${u} </strong>UV</p>\n            </div>\n          </div>\n          <div class="overview__card">\n            <p class="align-self">Visibility</p>\n            <svg class="overview__img">\n              <use href="${icons}#visibility"></use>\n            </svg>\n            <div>\n              <p><strong>${g}</strong> m</p>\n            </div>\n          </div>\n          <div class="overview__card">\n            <p class="align-self">Humidity</p>\n            <svg class="overview__img">\n              <use href="${icons}#humidity"></use>\n            </svg>\n            <div>\n              <p><strong>${i}</strong> %</p>\n            </div>\n          </div>\n    `;overview.innerHTML="",overview.insertAdjacentHTML("afterbegin",p)}}const weather=new Weather;geoBtn.addEventListener("click",weather.getLocation.bind(weather)),searchForm.addEventListener("submit",(e=>{if(e.preventDefault(),searchInpt.value.length<3)return;const t=searchInpt.value;weather.geoCoding(t),searchInpt.blur(),searchInpt.value=""}));